syntax = "proto3";
option go_package = "github.com/tdex-network/tdex-protobuf/generated/go/trade";
option java_package = "network.tdex.trade";

import "swap.proto";
import "types.proto";

service Trade {
  // Markets: List all the markets open for trading.
  rpc Markets(MarketsRequest) returns (MarketsReply);

  // Balances: Gets the balances of the two current reserves in the given
  // market.
  rpc Balances(BalancesRequest) returns (BalancesReply);

  // MarketPrice: Gets the current market price. In case of AMM startegy, the
  // trade type and
  // the amount of asset to be either sent or received.
  //
  // BUY = quote asset as input
  // SELL = base asset as input
  //
  // If the type of the trade is BUY it means the base asset will be received by
  // the trader.
  //
  // If the type of the trade is SELL it means the base asset will be sent by
  // the trader.
  rpc MarketPrice(MarketPriceRequest) returns (MarketPriceReply);

  // TradePropose: Sends a swap request message containing a partial signed
  // transaction.
  //
  // BUY = quote asset as input
  // SELL = base asset as input
  //
  //
  // If the type of the trade is BUY it means the base asset will be received by
  // the trader.
  //
  // If the type of the trade is SELL it means the base asset will be sent by
  // the trader.
  rpc TradePropose(TradeProposeRequest) returns (stream TradeProposeReply);

  // TradeComplete: Sends the trader's counter-signed transaction to the
  // provider. If something wrong, a swap fail message is sent. It returns the
  // transaction hash of the broadcasted transaction.
  rpc TradeComplete(TradeCompleteRequest) returns (stream TradeCompleteReply);
}

// BOTD#4 Service's messages
message MarketsRequest {}
message MarketsReply { repeated MarketWithFee markets = 1; }

message BalancesRequest { Market market = 1; }
message BalancesReply { repeated BalanceWithFee balances = 1; }


enum TradeType {
  BUY = 0;
  SELL = 1;
}

message MarketPriceRequest {
  Market market = 1;
  TradeType type = 2;
  uint64 amount = 3;
  string asset = 4;
}
message MarketPriceReply { repeated PriceWithFee prices = 1; }

message TradeProposeRequest {
  Market market = 1;
  TradeType type = 2;
  SwapRequest swap_request = 3;
}
message TradeProposeReply {
  SwapAccept swap_accept = 1;
  SwapFail swap_fail = 2;
  uint64 expiry_time_unix = 3;
}

message TradeCompleteRequest {
  SwapComplete swap_complete = 1;
  SwapFail swap_fail = 2;
}
message TradeCompleteReply {
  string txid = 1;
  SwapFail swap_fail = 2;
}
