// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: swap.proto

package network.tdex.swap;

public final class Swap {
  private Swap() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface SwapRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SwapRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * The proposer's quantity
     * </pre>
     *
     * <code>uint64 amount_p = 2;</code>
     * @return The amountP.
     */
    long getAmountP();

    /**
     * <pre>
     * The proposer's asset hash
     * </pre>
     *
     * <code>string asset_p = 3;</code>
     * @return The assetP.
     */
    java.lang.String getAssetP();
    /**
     * <pre>
     * The proposer's asset hash
     * </pre>
     *
     * <code>string asset_p = 3;</code>
     * @return The bytes for assetP.
     */
    com.google.protobuf.ByteString
        getAssetPBytes();

    /**
     * <pre>
     * The responder's quantity
     * </pre>
     *
     * <code>uint64 amount_r = 4;</code>
     * @return The amountR.
     */
    long getAmountR();

    /**
     * <pre>
     * The responder's asset hash
     * </pre>
     *
     * <code>string asset_r = 5;</code>
     * @return The assetR.
     */
    java.lang.String getAssetR();
    /**
     * <pre>
     * The responder's asset hash
     * </pre>
     *
     * <code>string asset_r = 5;</code>
     * @return The bytes for assetR.
     */
    com.google.protobuf.ByteString
        getAssetRBytes();

    /**
     * <pre>
     * The proposer's unsigned transaction in PSBT format (base64 string)
     * </pre>
     *
     * <code>string transaction = 6;</code>
     * @return The transaction.
     */
    java.lang.String getTransaction();
    /**
     * <pre>
     * The proposer's unsigned transaction in PSBT format (base64 string)
     * </pre>
     *
     * <code>string transaction = 6;</code>
     * @return The bytes for transaction.
     */
    com.google.protobuf.ByteString
        getTransactionBytes();

    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
     */
    int getInputBlindingKeyCount();
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
     */
    boolean containsInputBlindingKey(
        java.lang.String key);
    /**
     * Use {@link #getInputBlindingKeyMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getInputBlindingKey();
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
     */
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getInputBlindingKeyMap();
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
     */

    com.google.protobuf.ByteString getInputBlindingKeyOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
     */

    com.google.protobuf.ByteString getInputBlindingKeyOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
     */
    int getOutputBlindingKeyCount();
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
     */
    boolean containsOutputBlindingKey(
        java.lang.String key);
    /**
     * Use {@link #getOutputBlindingKeyMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getOutputBlindingKey();
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
     */
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getOutputBlindingKeyMap();
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
     */

    com.google.protobuf.ByteString getOutputBlindingKeyOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
     */

    com.google.protobuf.ByteString getOutputBlindingKeyOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code SwapRequest}
   */
  public  static final class SwapRequest extends
      com.google.protobuf.GeneratedMessageLite<
          SwapRequest, SwapRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:SwapRequest)
      SwapRequestOrBuilder {
    private SwapRequest() {
      id_ = "";
      assetP_ = "";
      assetR_ = "";
      transaction_ = "";
    }
    public static final int ID_FIELD_NUMBER = 1;
    private java.lang.String id_;
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      return id_;
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(id_);
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @param value The id to set.
     */
    private void setId(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      id_ = value;
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    private void clearId() {
      
      id_ = getDefaultInstance().getId();
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @param value The bytes for id to set.
     */
    private void setIdBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      id_ = value.toStringUtf8();
      
    }

    public static final int AMOUNT_P_FIELD_NUMBER = 2;
    private long amountP_;
    /**
     * <pre>
     * The proposer's quantity
     * </pre>
     *
     * <code>uint64 amount_p = 2;</code>
     * @return The amountP.
     */
    @java.lang.Override
    public long getAmountP() {
      return amountP_;
    }
    /**
     * <pre>
     * The proposer's quantity
     * </pre>
     *
     * <code>uint64 amount_p = 2;</code>
     * @param value The amountP to set.
     */
    private void setAmountP(long value) {
      
      amountP_ = value;
    }
    /**
     * <pre>
     * The proposer's quantity
     * </pre>
     *
     * <code>uint64 amount_p = 2;</code>
     */
    private void clearAmountP() {
      
      amountP_ = 0L;
    }

    public static final int ASSET_P_FIELD_NUMBER = 3;
    private java.lang.String assetP_;
    /**
     * <pre>
     * The proposer's asset hash
     * </pre>
     *
     * <code>string asset_p = 3;</code>
     * @return The assetP.
     */
    @java.lang.Override
    public java.lang.String getAssetP() {
      return assetP_;
    }
    /**
     * <pre>
     * The proposer's asset hash
     * </pre>
     *
     * <code>string asset_p = 3;</code>
     * @return The bytes for assetP.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAssetPBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(assetP_);
    }
    /**
     * <pre>
     * The proposer's asset hash
     * </pre>
     *
     * <code>string asset_p = 3;</code>
     * @param value The assetP to set.
     */
    private void setAssetP(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      assetP_ = value;
    }
    /**
     * <pre>
     * The proposer's asset hash
     * </pre>
     *
     * <code>string asset_p = 3;</code>
     */
    private void clearAssetP() {
      
      assetP_ = getDefaultInstance().getAssetP();
    }
    /**
     * <pre>
     * The proposer's asset hash
     * </pre>
     *
     * <code>string asset_p = 3;</code>
     * @param value The bytes for assetP to set.
     */
    private void setAssetPBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      assetP_ = value.toStringUtf8();
      
    }

    public static final int AMOUNT_R_FIELD_NUMBER = 4;
    private long amountR_;
    /**
     * <pre>
     * The responder's quantity
     * </pre>
     *
     * <code>uint64 amount_r = 4;</code>
     * @return The amountR.
     */
    @java.lang.Override
    public long getAmountR() {
      return amountR_;
    }
    /**
     * <pre>
     * The responder's quantity
     * </pre>
     *
     * <code>uint64 amount_r = 4;</code>
     * @param value The amountR to set.
     */
    private void setAmountR(long value) {
      
      amountR_ = value;
    }
    /**
     * <pre>
     * The responder's quantity
     * </pre>
     *
     * <code>uint64 amount_r = 4;</code>
     */
    private void clearAmountR() {
      
      amountR_ = 0L;
    }

    public static final int ASSET_R_FIELD_NUMBER = 5;
    private java.lang.String assetR_;
    /**
     * <pre>
     * The responder's asset hash
     * </pre>
     *
     * <code>string asset_r = 5;</code>
     * @return The assetR.
     */
    @java.lang.Override
    public java.lang.String getAssetR() {
      return assetR_;
    }
    /**
     * <pre>
     * The responder's asset hash
     * </pre>
     *
     * <code>string asset_r = 5;</code>
     * @return The bytes for assetR.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAssetRBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(assetR_);
    }
    /**
     * <pre>
     * The responder's asset hash
     * </pre>
     *
     * <code>string asset_r = 5;</code>
     * @param value The assetR to set.
     */
    private void setAssetR(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      assetR_ = value;
    }
    /**
     * <pre>
     * The responder's asset hash
     * </pre>
     *
     * <code>string asset_r = 5;</code>
     */
    private void clearAssetR() {
      
      assetR_ = getDefaultInstance().getAssetR();
    }
    /**
     * <pre>
     * The responder's asset hash
     * </pre>
     *
     * <code>string asset_r = 5;</code>
     * @param value The bytes for assetR to set.
     */
    private void setAssetRBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      assetR_ = value.toStringUtf8();
      
    }

    public static final int TRANSACTION_FIELD_NUMBER = 6;
    private java.lang.String transaction_;
    /**
     * <pre>
     * The proposer's unsigned transaction in PSBT format (base64 string)
     * </pre>
     *
     * <code>string transaction = 6;</code>
     * @return The transaction.
     */
    @java.lang.Override
    public java.lang.String getTransaction() {
      return transaction_;
    }
    /**
     * <pre>
     * The proposer's unsigned transaction in PSBT format (base64 string)
     * </pre>
     *
     * <code>string transaction = 6;</code>
     * @return The bytes for transaction.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTransactionBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(transaction_);
    }
    /**
     * <pre>
     * The proposer's unsigned transaction in PSBT format (base64 string)
     * </pre>
     *
     * <code>string transaction = 6;</code>
     * @param value The transaction to set.
     */
    private void setTransaction(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      transaction_ = value;
    }
    /**
     * <pre>
     * The proposer's unsigned transaction in PSBT format (base64 string)
     * </pre>
     *
     * <code>string transaction = 6;</code>
     */
    private void clearTransaction() {
      
      transaction_ = getDefaultInstance().getTransaction();
    }
    /**
     * <pre>
     * The proposer's unsigned transaction in PSBT format (base64 string)
     * </pre>
     *
     * <code>string transaction = 6;</code>
     * @param value The bytes for transaction to set.
     */
    private void setTransactionBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      transaction_ = value.toStringUtf8();
      
    }

    public static final int INPUT_BLINDING_KEY_FIELD_NUMBER = 7;
    private static final class InputBlindingKeyDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, com.google.protobuf.ByteString> inputBlindingKey_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.ByteString>
    internalGetInputBlindingKey() {
      return inputBlindingKey_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.ByteString>
    internalGetMutableInputBlindingKey() {
      if (!inputBlindingKey_.isMutable()) {
        inputBlindingKey_ = inputBlindingKey_.mutableCopy();
      }
      return inputBlindingKey_;
    }
    @java.lang.Override

    public int getInputBlindingKeyCount() {
      return internalGetInputBlindingKey().size();
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
     */
    @java.lang.Override

    public boolean containsInputBlindingKey(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      return internalGetInputBlindingKey().containsKey(key);
    }
    /**
     * Use {@link #getInputBlindingKeyMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getInputBlindingKey() {
      return getInputBlindingKeyMap();
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getInputBlindingKeyMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetInputBlindingKey());
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getInputBlindingKeyOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetInputBlindingKey();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getInputBlindingKeyOrThrow(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetInputBlindingKey();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
     */
    private java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getMutableInputBlindingKeyMap() {
      return internalGetMutableInputBlindingKey();
    }

    public static final int OUTPUT_BLINDING_KEY_FIELD_NUMBER = 8;
    private static final class OutputBlindingKeyDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, com.google.protobuf.ByteString> outputBlindingKey_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.ByteString>
    internalGetOutputBlindingKey() {
      return outputBlindingKey_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.ByteString>
    internalGetMutableOutputBlindingKey() {
      if (!outputBlindingKey_.isMutable()) {
        outputBlindingKey_ = outputBlindingKey_.mutableCopy();
      }
      return outputBlindingKey_;
    }
    @java.lang.Override

    public int getOutputBlindingKeyCount() {
      return internalGetOutputBlindingKey().size();
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
     */
    @java.lang.Override

    public boolean containsOutputBlindingKey(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      return internalGetOutputBlindingKey().containsKey(key);
    }
    /**
     * Use {@link #getOutputBlindingKeyMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getOutputBlindingKey() {
      return getOutputBlindingKeyMap();
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getOutputBlindingKeyMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetOutputBlindingKey());
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getOutputBlindingKeyOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetOutputBlindingKey();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getOutputBlindingKeyOrThrow(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetOutputBlindingKey();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
     */
    private java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getMutableOutputBlindingKeyMap() {
      return internalGetMutableOutputBlindingKey();
    }

    public static network.tdex.swap.Swap.SwapRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static network.tdex.swap.Swap.SwapRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static network.tdex.swap.Swap.SwapRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static network.tdex.swap.Swap.SwapRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static network.tdex.swap.Swap.SwapRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static network.tdex.swap.Swap.SwapRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static network.tdex.swap.Swap.SwapRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(network.tdex.swap.Swap.SwapRequest prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code SwapRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          network.tdex.swap.Swap.SwapRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:SwapRequest)
        network.tdex.swap.Swap.SwapRequestOrBuilder {
      // Construct using network.tdex.swap.Swap.SwapRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public java.lang.String getId() {
        return instance.getId();
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The bytes for id.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getIdBytes() {
        return instance.getIdBytes();
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        copyOnWrite();
        instance.setId(value);
        return this;
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        copyOnWrite();
        instance.clearId();
        return this;
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * The proposer's quantity
       * </pre>
       *
       * <code>uint64 amount_p = 2;</code>
       * @return The amountP.
       */
      @java.lang.Override
      public long getAmountP() {
        return instance.getAmountP();
      }
      /**
       * <pre>
       * The proposer's quantity
       * </pre>
       *
       * <code>uint64 amount_p = 2;</code>
       * @param value The amountP to set.
       * @return This builder for chaining.
       */
      public Builder setAmountP(long value) {
        copyOnWrite();
        instance.setAmountP(value);
        return this;
      }
      /**
       * <pre>
       * The proposer's quantity
       * </pre>
       *
       * <code>uint64 amount_p = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAmountP() {
        copyOnWrite();
        instance.clearAmountP();
        return this;
      }

      /**
       * <pre>
       * The proposer's asset hash
       * </pre>
       *
       * <code>string asset_p = 3;</code>
       * @return The assetP.
       */
      @java.lang.Override
      public java.lang.String getAssetP() {
        return instance.getAssetP();
      }
      /**
       * <pre>
       * The proposer's asset hash
       * </pre>
       *
       * <code>string asset_p = 3;</code>
       * @return The bytes for assetP.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getAssetPBytes() {
        return instance.getAssetPBytes();
      }
      /**
       * <pre>
       * The proposer's asset hash
       * </pre>
       *
       * <code>string asset_p = 3;</code>
       * @param value The assetP to set.
       * @return This builder for chaining.
       */
      public Builder setAssetP(
          java.lang.String value) {
        copyOnWrite();
        instance.setAssetP(value);
        return this;
      }
      /**
       * <pre>
       * The proposer's asset hash
       * </pre>
       *
       * <code>string asset_p = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearAssetP() {
        copyOnWrite();
        instance.clearAssetP();
        return this;
      }
      /**
       * <pre>
       * The proposer's asset hash
       * </pre>
       *
       * <code>string asset_p = 3;</code>
       * @param value The bytes for assetP to set.
       * @return This builder for chaining.
       */
      public Builder setAssetPBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAssetPBytes(value);
        return this;
      }

      /**
       * <pre>
       * The responder's quantity
       * </pre>
       *
       * <code>uint64 amount_r = 4;</code>
       * @return The amountR.
       */
      @java.lang.Override
      public long getAmountR() {
        return instance.getAmountR();
      }
      /**
       * <pre>
       * The responder's quantity
       * </pre>
       *
       * <code>uint64 amount_r = 4;</code>
       * @param value The amountR to set.
       * @return This builder for chaining.
       */
      public Builder setAmountR(long value) {
        copyOnWrite();
        instance.setAmountR(value);
        return this;
      }
      /**
       * <pre>
       * The responder's quantity
       * </pre>
       *
       * <code>uint64 amount_r = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearAmountR() {
        copyOnWrite();
        instance.clearAmountR();
        return this;
      }

      /**
       * <pre>
       * The responder's asset hash
       * </pre>
       *
       * <code>string asset_r = 5;</code>
       * @return The assetR.
       */
      @java.lang.Override
      public java.lang.String getAssetR() {
        return instance.getAssetR();
      }
      /**
       * <pre>
       * The responder's asset hash
       * </pre>
       *
       * <code>string asset_r = 5;</code>
       * @return The bytes for assetR.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getAssetRBytes() {
        return instance.getAssetRBytes();
      }
      /**
       * <pre>
       * The responder's asset hash
       * </pre>
       *
       * <code>string asset_r = 5;</code>
       * @param value The assetR to set.
       * @return This builder for chaining.
       */
      public Builder setAssetR(
          java.lang.String value) {
        copyOnWrite();
        instance.setAssetR(value);
        return this;
      }
      /**
       * <pre>
       * The responder's asset hash
       * </pre>
       *
       * <code>string asset_r = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearAssetR() {
        copyOnWrite();
        instance.clearAssetR();
        return this;
      }
      /**
       * <pre>
       * The responder's asset hash
       * </pre>
       *
       * <code>string asset_r = 5;</code>
       * @param value The bytes for assetR to set.
       * @return This builder for chaining.
       */
      public Builder setAssetRBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAssetRBytes(value);
        return this;
      }

      /**
       * <pre>
       * The proposer's unsigned transaction in PSBT format (base64 string)
       * </pre>
       *
       * <code>string transaction = 6;</code>
       * @return The transaction.
       */
      @java.lang.Override
      public java.lang.String getTransaction() {
        return instance.getTransaction();
      }
      /**
       * <pre>
       * The proposer's unsigned transaction in PSBT format (base64 string)
       * </pre>
       *
       * <code>string transaction = 6;</code>
       * @return The bytes for transaction.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTransactionBytes() {
        return instance.getTransactionBytes();
      }
      /**
       * <pre>
       * The proposer's unsigned transaction in PSBT format (base64 string)
       * </pre>
       *
       * <code>string transaction = 6;</code>
       * @param value The transaction to set.
       * @return This builder for chaining.
       */
      public Builder setTransaction(
          java.lang.String value) {
        copyOnWrite();
        instance.setTransaction(value);
        return this;
      }
      /**
       * <pre>
       * The proposer's unsigned transaction in PSBT format (base64 string)
       * </pre>
       *
       * <code>string transaction = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearTransaction() {
        copyOnWrite();
        instance.clearTransaction();
        return this;
      }
      /**
       * <pre>
       * The proposer's unsigned transaction in PSBT format (base64 string)
       * </pre>
       *
       * <code>string transaction = 6;</code>
       * @param value The bytes for transaction to set.
       * @return This builder for chaining.
       */
      public Builder setTransactionBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTransactionBytes(value);
        return this;
      }

      @java.lang.Override

      public int getInputBlindingKeyCount() {
        return instance.getInputBlindingKeyMap().size();
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
       */
      @java.lang.Override

      public boolean containsInputBlindingKey(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        return instance.getInputBlindingKeyMap().containsKey(key);
      }

      public Builder clearInputBlindingKey() {
        copyOnWrite();
        instance.getMutableInputBlindingKeyMap().clear();
        return this;
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
       */

      public Builder removeInputBlindingKey(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        copyOnWrite();
        instance.getMutableInputBlindingKeyMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getInputBlindingKeyMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getInputBlindingKey() {
        return getInputBlindingKeyMap();
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getInputBlindingKeyMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getInputBlindingKeyMap());
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getInputBlindingKeyOrDefault(
          java.lang.String key,
          com.google.protobuf.ByteString defaultValue) {
        java.lang.Class<?> keyClass = key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            instance.getInputBlindingKeyMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getInputBlindingKeyOrThrow(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            instance.getInputBlindingKeyMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
       */
      public Builder putInputBlindingKey(
          java.lang.String key,
          com.google.protobuf.ByteString value) {
        java.lang.Class<?> keyClass = key.getClass();
        java.lang.Class<?> valueClass = value.getClass();
        copyOnWrite();
        instance.getMutableInputBlindingKeyMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 7;</code>
       */
      public Builder putAllInputBlindingKey(
          java.util.Map<java.lang.String, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableInputBlindingKeyMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getOutputBlindingKeyCount() {
        return instance.getOutputBlindingKeyMap().size();
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
       */
      @java.lang.Override

      public boolean containsOutputBlindingKey(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        return instance.getOutputBlindingKeyMap().containsKey(key);
      }

      public Builder clearOutputBlindingKey() {
        copyOnWrite();
        instance.getMutableOutputBlindingKeyMap().clear();
        return this;
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
       */

      public Builder removeOutputBlindingKey(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        copyOnWrite();
        instance.getMutableOutputBlindingKeyMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getOutputBlindingKeyMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getOutputBlindingKey() {
        return getOutputBlindingKeyMap();
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getOutputBlindingKeyMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getOutputBlindingKeyMap());
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getOutputBlindingKeyOrDefault(
          java.lang.String key,
          com.google.protobuf.ByteString defaultValue) {
        java.lang.Class<?> keyClass = key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            instance.getOutputBlindingKeyMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getOutputBlindingKeyOrThrow(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            instance.getOutputBlindingKeyMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
       */
      public Builder putOutputBlindingKey(
          java.lang.String key,
          com.google.protobuf.ByteString value) {
        java.lang.Class<?> keyClass = key.getClass();
        java.lang.Class<?> valueClass = value.getClass();
        copyOnWrite();
        instance.getMutableOutputBlindingKeyMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 8;</code>
       */
      public Builder putAllOutputBlindingKey(
          java.util.Map<java.lang.String, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableOutputBlindingKeyMap().putAll(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SwapRequest)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new network.tdex.swap.Swap.SwapRequest();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "id_",
              "amountP_",
              "assetP_",
              "amountR_",
              "assetR_",
              "transaction_",
              "inputBlindingKey_",
              InputBlindingKeyDefaultEntryHolder.defaultEntry,
              "outputBlindingKey_",
              OutputBlindingKeyDefaultEntryHolder.defaultEntry,
            };
            java.lang.String info =
                "\u0000\b\u0000\u0000\u0001\b\b\u0002\u0000\u0000\u0001\u0208\u0002\u0003\u0003\u0208" +
                "\u0004\u0003\u0005\u0208\u0006\u0208\u00072\b2";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<network.tdex.swap.Swap.SwapRequest> parser = PARSER;
          if (parser == null) {
            synchronized (network.tdex.swap.Swap.SwapRequest.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<network.tdex.swap.Swap.SwapRequest>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:SwapRequest)
    private static final network.tdex.swap.Swap.SwapRequest DEFAULT_INSTANCE;
    static {
      SwapRequest defaultInstance = new SwapRequest();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        SwapRequest.class, defaultInstance);
    }

    public static network.tdex.swap.Swap.SwapRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SwapRequest> PARSER;

    public static com.google.protobuf.Parser<SwapRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SwapAcceptOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SwapAccept)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * indetifier of the SwapRequest message
     * </pre>
     *
     * <code>string request_id = 2;</code>
     * @return The requestId.
     */
    java.lang.String getRequestId();
    /**
     * <pre>
     * indetifier of the SwapRequest message
     * </pre>
     *
     * <code>string request_id = 2;</code>
     * @return The bytes for requestId.
     */
    com.google.protobuf.ByteString
        getRequestIdBytes();

    /**
     * <pre>
     * The partial signed transaction base64 encoded containing the Responder's
     * signed inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     * @return The transaction.
     */
    java.lang.String getTransaction();
    /**
     * <pre>
     * The partial signed transaction base64 encoded containing the Responder's
     * signed inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     * @return The bytes for transaction.
     */
    com.google.protobuf.ByteString
        getTransactionBytes();

    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
     */
    int getInputBlindingKeyCount();
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
     */
    boolean containsInputBlindingKey(
        java.lang.String key);
    /**
     * Use {@link #getInputBlindingKeyMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getInputBlindingKey();
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
     */
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getInputBlindingKeyMap();
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
     */

    com.google.protobuf.ByteString getInputBlindingKeyOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
     */

    com.google.protobuf.ByteString getInputBlindingKeyOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
     */
    int getOutputBlindingKeyCount();
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
     */
    boolean containsOutputBlindingKey(
        java.lang.String key);
    /**
     * Use {@link #getOutputBlindingKeyMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getOutputBlindingKey();
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
     */
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getOutputBlindingKeyMap();
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
     */

    com.google.protobuf.ByteString getOutputBlindingKeyOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
     */

    com.google.protobuf.ByteString getOutputBlindingKeyOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code SwapAccept}
   */
  public  static final class SwapAccept extends
      com.google.protobuf.GeneratedMessageLite<
          SwapAccept, SwapAccept.Builder> implements
      // @@protoc_insertion_point(message_implements:SwapAccept)
      SwapAcceptOrBuilder {
    private SwapAccept() {
      id_ = "";
      requestId_ = "";
      transaction_ = "";
    }
    public static final int ID_FIELD_NUMBER = 1;
    private java.lang.String id_;
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      return id_;
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(id_);
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @param value The id to set.
     */
    private void setId(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      id_ = value;
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    private void clearId() {
      
      id_ = getDefaultInstance().getId();
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @param value The bytes for id to set.
     */
    private void setIdBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      id_ = value.toStringUtf8();
      
    }

    public static final int REQUEST_ID_FIELD_NUMBER = 2;
    private java.lang.String requestId_;
    /**
     * <pre>
     * indetifier of the SwapRequest message
     * </pre>
     *
     * <code>string request_id = 2;</code>
     * @return The requestId.
     */
    @java.lang.Override
    public java.lang.String getRequestId() {
      return requestId_;
    }
    /**
     * <pre>
     * indetifier of the SwapRequest message
     * </pre>
     *
     * <code>string request_id = 2;</code>
     * @return The bytes for requestId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRequestIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(requestId_);
    }
    /**
     * <pre>
     * indetifier of the SwapRequest message
     * </pre>
     *
     * <code>string request_id = 2;</code>
     * @param value The requestId to set.
     */
    private void setRequestId(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      requestId_ = value;
    }
    /**
     * <pre>
     * indetifier of the SwapRequest message
     * </pre>
     *
     * <code>string request_id = 2;</code>
     */
    private void clearRequestId() {
      
      requestId_ = getDefaultInstance().getRequestId();
    }
    /**
     * <pre>
     * indetifier of the SwapRequest message
     * </pre>
     *
     * <code>string request_id = 2;</code>
     * @param value The bytes for requestId to set.
     */
    private void setRequestIdBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      requestId_ = value.toStringUtf8();
      
    }

    public static final int TRANSACTION_FIELD_NUMBER = 3;
    private java.lang.String transaction_;
    /**
     * <pre>
     * The partial signed transaction base64 encoded containing the Responder's
     * signed inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     * @return The transaction.
     */
    @java.lang.Override
    public java.lang.String getTransaction() {
      return transaction_;
    }
    /**
     * <pre>
     * The partial signed transaction base64 encoded containing the Responder's
     * signed inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     * @return The bytes for transaction.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTransactionBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(transaction_);
    }
    /**
     * <pre>
     * The partial signed transaction base64 encoded containing the Responder's
     * signed inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     * @param value The transaction to set.
     */
    private void setTransaction(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      transaction_ = value;
    }
    /**
     * <pre>
     * The partial signed transaction base64 encoded containing the Responder's
     * signed inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     */
    private void clearTransaction() {
      
      transaction_ = getDefaultInstance().getTransaction();
    }
    /**
     * <pre>
     * The partial signed transaction base64 encoded containing the Responder's
     * signed inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     * @param value The bytes for transaction to set.
     */
    private void setTransactionBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      transaction_ = value.toStringUtf8();
      
    }

    public static final int INPUT_BLINDING_KEY_FIELD_NUMBER = 4;
    private static final class InputBlindingKeyDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, com.google.protobuf.ByteString> inputBlindingKey_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.ByteString>
    internalGetInputBlindingKey() {
      return inputBlindingKey_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.ByteString>
    internalGetMutableInputBlindingKey() {
      if (!inputBlindingKey_.isMutable()) {
        inputBlindingKey_ = inputBlindingKey_.mutableCopy();
      }
      return inputBlindingKey_;
    }
    @java.lang.Override

    public int getInputBlindingKeyCount() {
      return internalGetInputBlindingKey().size();
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
     */
    @java.lang.Override

    public boolean containsInputBlindingKey(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      return internalGetInputBlindingKey().containsKey(key);
    }
    /**
     * Use {@link #getInputBlindingKeyMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getInputBlindingKey() {
      return getInputBlindingKeyMap();
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getInputBlindingKeyMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetInputBlindingKey());
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getInputBlindingKeyOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetInputBlindingKey();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getInputBlindingKeyOrThrow(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetInputBlindingKey();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * input is included. Each blinding key is identified by the prevout script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
     */
    private java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getMutableInputBlindingKeyMap() {
      return internalGetMutableInputBlindingKey();
    }

    public static final int OUTPUT_BLINDING_KEY_FIELD_NUMBER = 5;
    private static final class OutputBlindingKeyDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, com.google.protobuf.ByteString> outputBlindingKey_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.ByteString>
    internalGetOutputBlindingKey() {
      return outputBlindingKey_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.ByteString>
    internalGetMutableOutputBlindingKey() {
      if (!outputBlindingKey_.isMutable()) {
        outputBlindingKey_ = outputBlindingKey_.mutableCopy();
      }
      return outputBlindingKey_;
    }
    @java.lang.Override

    public int getOutputBlindingKeyCount() {
      return internalGetOutputBlindingKey().size();
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
     */
    @java.lang.Override

    public boolean containsOutputBlindingKey(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      return internalGetOutputBlindingKey().containsKey(key);
    }
    /**
     * Use {@link #getOutputBlindingKeyMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getOutputBlindingKey() {
      return getOutputBlindingKeyMap();
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getOutputBlindingKeyMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetOutputBlindingKey());
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getOutputBlindingKeyOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetOutputBlindingKey();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getOutputBlindingKeyOrThrow(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetOutputBlindingKey();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * In case of a confidential transaction the blinding key of each confidential
     * output is included. Each blinding key is identified by the output script
     * hex encoded.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
     */
    private java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getMutableOutputBlindingKeyMap() {
      return internalGetMutableOutputBlindingKey();
    }

    public static network.tdex.swap.Swap.SwapAccept parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static network.tdex.swap.Swap.SwapAccept parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapAccept parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static network.tdex.swap.Swap.SwapAccept parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapAccept parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static network.tdex.swap.Swap.SwapAccept parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapAccept parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static network.tdex.swap.Swap.SwapAccept parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapAccept parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static network.tdex.swap.Swap.SwapAccept parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapAccept parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static network.tdex.swap.Swap.SwapAccept parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(network.tdex.swap.Swap.SwapAccept prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code SwapAccept}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          network.tdex.swap.Swap.SwapAccept, Builder> implements
        // @@protoc_insertion_point(builder_implements:SwapAccept)
        network.tdex.swap.Swap.SwapAcceptOrBuilder {
      // Construct using network.tdex.swap.Swap.SwapAccept.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public java.lang.String getId() {
        return instance.getId();
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The bytes for id.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getIdBytes() {
        return instance.getIdBytes();
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        copyOnWrite();
        instance.setId(value);
        return this;
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        copyOnWrite();
        instance.clearId();
        return this;
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * indetifier of the SwapRequest message
       * </pre>
       *
       * <code>string request_id = 2;</code>
       * @return The requestId.
       */
      @java.lang.Override
      public java.lang.String getRequestId() {
        return instance.getRequestId();
      }
      /**
       * <pre>
       * indetifier of the SwapRequest message
       * </pre>
       *
       * <code>string request_id = 2;</code>
       * @return The bytes for requestId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getRequestIdBytes() {
        return instance.getRequestIdBytes();
      }
      /**
       * <pre>
       * indetifier of the SwapRequest message
       * </pre>
       *
       * <code>string request_id = 2;</code>
       * @param value The requestId to set.
       * @return This builder for chaining.
       */
      public Builder setRequestId(
          java.lang.String value) {
        copyOnWrite();
        instance.setRequestId(value);
        return this;
      }
      /**
       * <pre>
       * indetifier of the SwapRequest message
       * </pre>
       *
       * <code>string request_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearRequestId() {
        copyOnWrite();
        instance.clearRequestId();
        return this;
      }
      /**
       * <pre>
       * indetifier of the SwapRequest message
       * </pre>
       *
       * <code>string request_id = 2;</code>
       * @param value The bytes for requestId to set.
       * @return This builder for chaining.
       */
      public Builder setRequestIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setRequestIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * The partial signed transaction base64 encoded containing the Responder's
       * signed inputs in a PSBT format
       * </pre>
       *
       * <code>string transaction = 3;</code>
       * @return The transaction.
       */
      @java.lang.Override
      public java.lang.String getTransaction() {
        return instance.getTransaction();
      }
      /**
       * <pre>
       * The partial signed transaction base64 encoded containing the Responder's
       * signed inputs in a PSBT format
       * </pre>
       *
       * <code>string transaction = 3;</code>
       * @return The bytes for transaction.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTransactionBytes() {
        return instance.getTransactionBytes();
      }
      /**
       * <pre>
       * The partial signed transaction base64 encoded containing the Responder's
       * signed inputs in a PSBT format
       * </pre>
       *
       * <code>string transaction = 3;</code>
       * @param value The transaction to set.
       * @return This builder for chaining.
       */
      public Builder setTransaction(
          java.lang.String value) {
        copyOnWrite();
        instance.setTransaction(value);
        return this;
      }
      /**
       * <pre>
       * The partial signed transaction base64 encoded containing the Responder's
       * signed inputs in a PSBT format
       * </pre>
       *
       * <code>string transaction = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTransaction() {
        copyOnWrite();
        instance.clearTransaction();
        return this;
      }
      /**
       * <pre>
       * The partial signed transaction base64 encoded containing the Responder's
       * signed inputs in a PSBT format
       * </pre>
       *
       * <code>string transaction = 3;</code>
       * @param value The bytes for transaction to set.
       * @return This builder for chaining.
       */
      public Builder setTransactionBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTransactionBytes(value);
        return this;
      }

      @java.lang.Override

      public int getInputBlindingKeyCount() {
        return instance.getInputBlindingKeyMap().size();
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
       */
      @java.lang.Override

      public boolean containsInputBlindingKey(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        return instance.getInputBlindingKeyMap().containsKey(key);
      }

      public Builder clearInputBlindingKey() {
        copyOnWrite();
        instance.getMutableInputBlindingKeyMap().clear();
        return this;
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
       */

      public Builder removeInputBlindingKey(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        copyOnWrite();
        instance.getMutableInputBlindingKeyMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getInputBlindingKeyMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getInputBlindingKey() {
        return getInputBlindingKeyMap();
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getInputBlindingKeyMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getInputBlindingKeyMap());
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getInputBlindingKeyOrDefault(
          java.lang.String key,
          com.google.protobuf.ByteString defaultValue) {
        java.lang.Class<?> keyClass = key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            instance.getInputBlindingKeyMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getInputBlindingKeyOrThrow(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            instance.getInputBlindingKeyMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
       */
      public Builder putInputBlindingKey(
          java.lang.String key,
          com.google.protobuf.ByteString value) {
        java.lang.Class<?> keyClass = key.getClass();
        java.lang.Class<?> valueClass = value.getClass();
        copyOnWrite();
        instance.getMutableInputBlindingKeyMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * input is included. Each blinding key is identified by the prevout script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; input_blinding_key = 4;</code>
       */
      public Builder putAllInputBlindingKey(
          java.util.Map<java.lang.String, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableInputBlindingKeyMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getOutputBlindingKeyCount() {
        return instance.getOutputBlindingKeyMap().size();
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
       */
      @java.lang.Override

      public boolean containsOutputBlindingKey(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        return instance.getOutputBlindingKeyMap().containsKey(key);
      }

      public Builder clearOutputBlindingKey() {
        copyOnWrite();
        instance.getMutableOutputBlindingKeyMap().clear();
        return this;
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
       */

      public Builder removeOutputBlindingKey(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        copyOnWrite();
        instance.getMutableOutputBlindingKeyMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getOutputBlindingKeyMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getOutputBlindingKey() {
        return getOutputBlindingKeyMap();
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getOutputBlindingKeyMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getOutputBlindingKeyMap());
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getOutputBlindingKeyOrDefault(
          java.lang.String key,
          com.google.protobuf.ByteString defaultValue) {
        java.lang.Class<?> keyClass = key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            instance.getOutputBlindingKeyMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getOutputBlindingKeyOrThrow(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            instance.getOutputBlindingKeyMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
       */
      public Builder putOutputBlindingKey(
          java.lang.String key,
          com.google.protobuf.ByteString value) {
        java.lang.Class<?> keyClass = key.getClass();
        java.lang.Class<?> valueClass = value.getClass();
        copyOnWrite();
        instance.getMutableOutputBlindingKeyMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * In case of a confidential transaction the blinding key of each confidential
       * output is included. Each blinding key is identified by the output script
       * hex encoded.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; output_blinding_key = 5;</code>
       */
      public Builder putAllOutputBlindingKey(
          java.util.Map<java.lang.String, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableOutputBlindingKeyMap().putAll(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SwapAccept)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new network.tdex.swap.Swap.SwapAccept();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "id_",
              "requestId_",
              "transaction_",
              "inputBlindingKey_",
              InputBlindingKeyDefaultEntryHolder.defaultEntry,
              "outputBlindingKey_",
              OutputBlindingKeyDefaultEntryHolder.defaultEntry,
            };
            java.lang.String info =
                "\u0000\u0005\u0000\u0000\u0001\u0005\u0005\u0002\u0000\u0000\u0001\u0208\u0002\u0208" +
                "\u0003\u0208\u00042\u00052";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<network.tdex.swap.Swap.SwapAccept> parser = PARSER;
          if (parser == null) {
            synchronized (network.tdex.swap.Swap.SwapAccept.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<network.tdex.swap.Swap.SwapAccept>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:SwapAccept)
    private static final network.tdex.swap.Swap.SwapAccept DEFAULT_INSTANCE;
    static {
      SwapAccept defaultInstance = new SwapAccept();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        SwapAccept.class, defaultInstance);
    }

    public static network.tdex.swap.Swap.SwapAccept getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SwapAccept> PARSER;

    public static com.google.protobuf.Parser<SwapAccept> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SwapCompleteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SwapComplete)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * indetifier of the SwapAccept message
     * </pre>
     *
     * <code>string accept_id = 2;</code>
     * @return The acceptId.
     */
    java.lang.String getAcceptId();
    /**
     * <pre>
     * indetifier of the SwapAccept message
     * </pre>
     *
     * <code>string accept_id = 2;</code>
     * @return The bytes for acceptId.
     */
    com.google.protobuf.ByteString
        getAcceptIdBytes();

    /**
     * <pre>
     * The signed transaction base64 encoded containing the Proposers's signed
     * inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     * @return The transaction.
     */
    java.lang.String getTransaction();
    /**
     * <pre>
     * The signed transaction base64 encoded containing the Proposers's signed
     * inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     * @return The bytes for transaction.
     */
    com.google.protobuf.ByteString
        getTransactionBytes();
  }
  /**
   * Protobuf type {@code SwapComplete}
   */
  public  static final class SwapComplete extends
      com.google.protobuf.GeneratedMessageLite<
          SwapComplete, SwapComplete.Builder> implements
      // @@protoc_insertion_point(message_implements:SwapComplete)
      SwapCompleteOrBuilder {
    private SwapComplete() {
      id_ = "";
      acceptId_ = "";
      transaction_ = "";
    }
    public static final int ID_FIELD_NUMBER = 1;
    private java.lang.String id_;
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      return id_;
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(id_);
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @param value The id to set.
     */
    private void setId(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      id_ = value;
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    private void clearId() {
      
      id_ = getDefaultInstance().getId();
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @param value The bytes for id to set.
     */
    private void setIdBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      id_ = value.toStringUtf8();
      
    }

    public static final int ACCEPT_ID_FIELD_NUMBER = 2;
    private java.lang.String acceptId_;
    /**
     * <pre>
     * indetifier of the SwapAccept message
     * </pre>
     *
     * <code>string accept_id = 2;</code>
     * @return The acceptId.
     */
    @java.lang.Override
    public java.lang.String getAcceptId() {
      return acceptId_;
    }
    /**
     * <pre>
     * indetifier of the SwapAccept message
     * </pre>
     *
     * <code>string accept_id = 2;</code>
     * @return The bytes for acceptId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAcceptIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(acceptId_);
    }
    /**
     * <pre>
     * indetifier of the SwapAccept message
     * </pre>
     *
     * <code>string accept_id = 2;</code>
     * @param value The acceptId to set.
     */
    private void setAcceptId(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      acceptId_ = value;
    }
    /**
     * <pre>
     * indetifier of the SwapAccept message
     * </pre>
     *
     * <code>string accept_id = 2;</code>
     */
    private void clearAcceptId() {
      
      acceptId_ = getDefaultInstance().getAcceptId();
    }
    /**
     * <pre>
     * indetifier of the SwapAccept message
     * </pre>
     *
     * <code>string accept_id = 2;</code>
     * @param value The bytes for acceptId to set.
     */
    private void setAcceptIdBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      acceptId_ = value.toStringUtf8();
      
    }

    public static final int TRANSACTION_FIELD_NUMBER = 3;
    private java.lang.String transaction_;
    /**
     * <pre>
     * The signed transaction base64 encoded containing the Proposers's signed
     * inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     * @return The transaction.
     */
    @java.lang.Override
    public java.lang.String getTransaction() {
      return transaction_;
    }
    /**
     * <pre>
     * The signed transaction base64 encoded containing the Proposers's signed
     * inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     * @return The bytes for transaction.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTransactionBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(transaction_);
    }
    /**
     * <pre>
     * The signed transaction base64 encoded containing the Proposers's signed
     * inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     * @param value The transaction to set.
     */
    private void setTransaction(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      transaction_ = value;
    }
    /**
     * <pre>
     * The signed transaction base64 encoded containing the Proposers's signed
     * inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     */
    private void clearTransaction() {
      
      transaction_ = getDefaultInstance().getTransaction();
    }
    /**
     * <pre>
     * The signed transaction base64 encoded containing the Proposers's signed
     * inputs in a PSBT format
     * </pre>
     *
     * <code>string transaction = 3;</code>
     * @param value The bytes for transaction to set.
     */
    private void setTransactionBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      transaction_ = value.toStringUtf8();
      
    }

    public static network.tdex.swap.Swap.SwapComplete parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static network.tdex.swap.Swap.SwapComplete parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapComplete parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static network.tdex.swap.Swap.SwapComplete parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapComplete parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static network.tdex.swap.Swap.SwapComplete parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapComplete parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static network.tdex.swap.Swap.SwapComplete parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapComplete parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static network.tdex.swap.Swap.SwapComplete parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapComplete parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static network.tdex.swap.Swap.SwapComplete parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(network.tdex.swap.Swap.SwapComplete prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code SwapComplete}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          network.tdex.swap.Swap.SwapComplete, Builder> implements
        // @@protoc_insertion_point(builder_implements:SwapComplete)
        network.tdex.swap.Swap.SwapCompleteOrBuilder {
      // Construct using network.tdex.swap.Swap.SwapComplete.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public java.lang.String getId() {
        return instance.getId();
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The bytes for id.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getIdBytes() {
        return instance.getIdBytes();
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        copyOnWrite();
        instance.setId(value);
        return this;
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        copyOnWrite();
        instance.clearId();
        return this;
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * indetifier of the SwapAccept message
       * </pre>
       *
       * <code>string accept_id = 2;</code>
       * @return The acceptId.
       */
      @java.lang.Override
      public java.lang.String getAcceptId() {
        return instance.getAcceptId();
      }
      /**
       * <pre>
       * indetifier of the SwapAccept message
       * </pre>
       *
       * <code>string accept_id = 2;</code>
       * @return The bytes for acceptId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getAcceptIdBytes() {
        return instance.getAcceptIdBytes();
      }
      /**
       * <pre>
       * indetifier of the SwapAccept message
       * </pre>
       *
       * <code>string accept_id = 2;</code>
       * @param value The acceptId to set.
       * @return This builder for chaining.
       */
      public Builder setAcceptId(
          java.lang.String value) {
        copyOnWrite();
        instance.setAcceptId(value);
        return this;
      }
      /**
       * <pre>
       * indetifier of the SwapAccept message
       * </pre>
       *
       * <code>string accept_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAcceptId() {
        copyOnWrite();
        instance.clearAcceptId();
        return this;
      }
      /**
       * <pre>
       * indetifier of the SwapAccept message
       * </pre>
       *
       * <code>string accept_id = 2;</code>
       * @param value The bytes for acceptId to set.
       * @return This builder for chaining.
       */
      public Builder setAcceptIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAcceptIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * The signed transaction base64 encoded containing the Proposers's signed
       * inputs in a PSBT format
       * </pre>
       *
       * <code>string transaction = 3;</code>
       * @return The transaction.
       */
      @java.lang.Override
      public java.lang.String getTransaction() {
        return instance.getTransaction();
      }
      /**
       * <pre>
       * The signed transaction base64 encoded containing the Proposers's signed
       * inputs in a PSBT format
       * </pre>
       *
       * <code>string transaction = 3;</code>
       * @return The bytes for transaction.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTransactionBytes() {
        return instance.getTransactionBytes();
      }
      /**
       * <pre>
       * The signed transaction base64 encoded containing the Proposers's signed
       * inputs in a PSBT format
       * </pre>
       *
       * <code>string transaction = 3;</code>
       * @param value The transaction to set.
       * @return This builder for chaining.
       */
      public Builder setTransaction(
          java.lang.String value) {
        copyOnWrite();
        instance.setTransaction(value);
        return this;
      }
      /**
       * <pre>
       * The signed transaction base64 encoded containing the Proposers's signed
       * inputs in a PSBT format
       * </pre>
       *
       * <code>string transaction = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTransaction() {
        copyOnWrite();
        instance.clearTransaction();
        return this;
      }
      /**
       * <pre>
       * The signed transaction base64 encoded containing the Proposers's signed
       * inputs in a PSBT format
       * </pre>
       *
       * <code>string transaction = 3;</code>
       * @param value The bytes for transaction to set.
       * @return This builder for chaining.
       */
      public Builder setTransactionBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTransactionBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SwapComplete)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new network.tdex.swap.Swap.SwapComplete();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "id_",
              "acceptId_",
              "transaction_",
            };
            java.lang.String info =
                "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u0208\u0002\u0208" +
                "\u0003\u0208";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<network.tdex.swap.Swap.SwapComplete> parser = PARSER;
          if (parser == null) {
            synchronized (network.tdex.swap.Swap.SwapComplete.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<network.tdex.swap.Swap.SwapComplete>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:SwapComplete)
    private static final network.tdex.swap.Swap.SwapComplete DEFAULT_INSTANCE;
    static {
      SwapComplete defaultInstance = new SwapComplete();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        SwapComplete.class, defaultInstance);
    }

    public static network.tdex.swap.Swap.SwapComplete getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SwapComplete> PARSER;

    public static com.google.protobuf.Parser<SwapComplete> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SwapFailOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SwapFail)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * indetifier of either SwapRequest or SwapAccept message. It can be empty
     * </pre>
     *
     * <code>string message_id = 2;</code>
     * @return The messageId.
     */
    java.lang.String getMessageId();
    /**
     * <pre>
     * indetifier of either SwapRequest or SwapAccept message. It can be empty
     * </pre>
     *
     * <code>string message_id = 2;</code>
     * @return The bytes for messageId.
     */
    com.google.protobuf.ByteString
        getMessageIdBytes();

    /**
     * <pre>
     * The failure code. It can be empty
     * </pre>
     *
     * <code>uint32 failure_code = 3;</code>
     * @return The failureCode.
     */
    int getFailureCode();

    /**
     * <pre>
     * The failure reason messaged
     * </pre>
     *
     * <code>string failure_message = 4;</code>
     * @return The failureMessage.
     */
    java.lang.String getFailureMessage();
    /**
     * <pre>
     * The failure reason messaged
     * </pre>
     *
     * <code>string failure_message = 4;</code>
     * @return The bytes for failureMessage.
     */
    com.google.protobuf.ByteString
        getFailureMessageBytes();
  }
  /**
   * Protobuf type {@code SwapFail}
   */
  public  static final class SwapFail extends
      com.google.protobuf.GeneratedMessageLite<
          SwapFail, SwapFail.Builder> implements
      // @@protoc_insertion_point(message_implements:SwapFail)
      SwapFailOrBuilder {
    private SwapFail() {
      id_ = "";
      messageId_ = "";
      failureMessage_ = "";
    }
    public static final int ID_FIELD_NUMBER = 1;
    private java.lang.String id_;
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      return id_;
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(id_);
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @param value The id to set.
     */
    private void setId(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      id_ = value;
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    private void clearId() {
      
      id_ = getDefaultInstance().getId();
    }
    /**
     * <pre>
     * Random unique identifier for the current message
     * </pre>
     *
     * <code>string id = 1;</code>
     * @param value The bytes for id to set.
     */
    private void setIdBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      id_ = value.toStringUtf8();
      
    }

    public static final int MESSAGE_ID_FIELD_NUMBER = 2;
    private java.lang.String messageId_;
    /**
     * <pre>
     * indetifier of either SwapRequest or SwapAccept message. It can be empty
     * </pre>
     *
     * <code>string message_id = 2;</code>
     * @return The messageId.
     */
    @java.lang.Override
    public java.lang.String getMessageId() {
      return messageId_;
    }
    /**
     * <pre>
     * indetifier of either SwapRequest or SwapAccept message. It can be empty
     * </pre>
     *
     * <code>string message_id = 2;</code>
     * @return The bytes for messageId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMessageIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(messageId_);
    }
    /**
     * <pre>
     * indetifier of either SwapRequest or SwapAccept message. It can be empty
     * </pre>
     *
     * <code>string message_id = 2;</code>
     * @param value The messageId to set.
     */
    private void setMessageId(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      messageId_ = value;
    }
    /**
     * <pre>
     * indetifier of either SwapRequest or SwapAccept message. It can be empty
     * </pre>
     *
     * <code>string message_id = 2;</code>
     */
    private void clearMessageId() {
      
      messageId_ = getDefaultInstance().getMessageId();
    }
    /**
     * <pre>
     * indetifier of either SwapRequest or SwapAccept message. It can be empty
     * </pre>
     *
     * <code>string message_id = 2;</code>
     * @param value The bytes for messageId to set.
     */
    private void setMessageIdBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      messageId_ = value.toStringUtf8();
      
    }

    public static final int FAILURE_CODE_FIELD_NUMBER = 3;
    private int failureCode_;
    /**
     * <pre>
     * The failure code. It can be empty
     * </pre>
     *
     * <code>uint32 failure_code = 3;</code>
     * @return The failureCode.
     */
    @java.lang.Override
    public int getFailureCode() {
      return failureCode_;
    }
    /**
     * <pre>
     * The failure code. It can be empty
     * </pre>
     *
     * <code>uint32 failure_code = 3;</code>
     * @param value The failureCode to set.
     */
    private void setFailureCode(int value) {
      
      failureCode_ = value;
    }
    /**
     * <pre>
     * The failure code. It can be empty
     * </pre>
     *
     * <code>uint32 failure_code = 3;</code>
     */
    private void clearFailureCode() {
      
      failureCode_ = 0;
    }

    public static final int FAILURE_MESSAGE_FIELD_NUMBER = 4;
    private java.lang.String failureMessage_;
    /**
     * <pre>
     * The failure reason messaged
     * </pre>
     *
     * <code>string failure_message = 4;</code>
     * @return The failureMessage.
     */
    @java.lang.Override
    public java.lang.String getFailureMessage() {
      return failureMessage_;
    }
    /**
     * <pre>
     * The failure reason messaged
     * </pre>
     *
     * <code>string failure_message = 4;</code>
     * @return The bytes for failureMessage.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFailureMessageBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(failureMessage_);
    }
    /**
     * <pre>
     * The failure reason messaged
     * </pre>
     *
     * <code>string failure_message = 4;</code>
     * @param value The failureMessage to set.
     */
    private void setFailureMessage(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      failureMessage_ = value;
    }
    /**
     * <pre>
     * The failure reason messaged
     * </pre>
     *
     * <code>string failure_message = 4;</code>
     */
    private void clearFailureMessage() {
      
      failureMessage_ = getDefaultInstance().getFailureMessage();
    }
    /**
     * <pre>
     * The failure reason messaged
     * </pre>
     *
     * <code>string failure_message = 4;</code>
     * @param value The bytes for failureMessage to set.
     */
    private void setFailureMessageBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      failureMessage_ = value.toStringUtf8();
      
    }

    public static network.tdex.swap.Swap.SwapFail parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static network.tdex.swap.Swap.SwapFail parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapFail parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static network.tdex.swap.Swap.SwapFail parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapFail parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static network.tdex.swap.Swap.SwapFail parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapFail parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static network.tdex.swap.Swap.SwapFail parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapFail parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static network.tdex.swap.Swap.SwapFail parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static network.tdex.swap.Swap.SwapFail parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static network.tdex.swap.Swap.SwapFail parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(network.tdex.swap.Swap.SwapFail prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code SwapFail}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          network.tdex.swap.Swap.SwapFail, Builder> implements
        // @@protoc_insertion_point(builder_implements:SwapFail)
        network.tdex.swap.Swap.SwapFailOrBuilder {
      // Construct using network.tdex.swap.Swap.SwapFail.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public java.lang.String getId() {
        return instance.getId();
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The bytes for id.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getIdBytes() {
        return instance.getIdBytes();
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        copyOnWrite();
        instance.setId(value);
        return this;
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        copyOnWrite();
        instance.clearId();
        return this;
      }
      /**
       * <pre>
       * Random unique identifier for the current message
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * indetifier of either SwapRequest or SwapAccept message. It can be empty
       * </pre>
       *
       * <code>string message_id = 2;</code>
       * @return The messageId.
       */
      @java.lang.Override
      public java.lang.String getMessageId() {
        return instance.getMessageId();
      }
      /**
       * <pre>
       * indetifier of either SwapRequest or SwapAccept message. It can be empty
       * </pre>
       *
       * <code>string message_id = 2;</code>
       * @return The bytes for messageId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getMessageIdBytes() {
        return instance.getMessageIdBytes();
      }
      /**
       * <pre>
       * indetifier of either SwapRequest or SwapAccept message. It can be empty
       * </pre>
       *
       * <code>string message_id = 2;</code>
       * @param value The messageId to set.
       * @return This builder for chaining.
       */
      public Builder setMessageId(
          java.lang.String value) {
        copyOnWrite();
        instance.setMessageId(value);
        return this;
      }
      /**
       * <pre>
       * indetifier of either SwapRequest or SwapAccept message. It can be empty
       * </pre>
       *
       * <code>string message_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessageId() {
        copyOnWrite();
        instance.clearMessageId();
        return this;
      }
      /**
       * <pre>
       * indetifier of either SwapRequest or SwapAccept message. It can be empty
       * </pre>
       *
       * <code>string message_id = 2;</code>
       * @param value The bytes for messageId to set.
       * @return This builder for chaining.
       */
      public Builder setMessageIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMessageIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * The failure code. It can be empty
       * </pre>
       *
       * <code>uint32 failure_code = 3;</code>
       * @return The failureCode.
       */
      @java.lang.Override
      public int getFailureCode() {
        return instance.getFailureCode();
      }
      /**
       * <pre>
       * The failure code. It can be empty
       * </pre>
       *
       * <code>uint32 failure_code = 3;</code>
       * @param value The failureCode to set.
       * @return This builder for chaining.
       */
      public Builder setFailureCode(int value) {
        copyOnWrite();
        instance.setFailureCode(value);
        return this;
      }
      /**
       * <pre>
       * The failure code. It can be empty
       * </pre>
       *
       * <code>uint32 failure_code = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFailureCode() {
        copyOnWrite();
        instance.clearFailureCode();
        return this;
      }

      /**
       * <pre>
       * The failure reason messaged
       * </pre>
       *
       * <code>string failure_message = 4;</code>
       * @return The failureMessage.
       */
      @java.lang.Override
      public java.lang.String getFailureMessage() {
        return instance.getFailureMessage();
      }
      /**
       * <pre>
       * The failure reason messaged
       * </pre>
       *
       * <code>string failure_message = 4;</code>
       * @return The bytes for failureMessage.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getFailureMessageBytes() {
        return instance.getFailureMessageBytes();
      }
      /**
       * <pre>
       * The failure reason messaged
       * </pre>
       *
       * <code>string failure_message = 4;</code>
       * @param value The failureMessage to set.
       * @return This builder for chaining.
       */
      public Builder setFailureMessage(
          java.lang.String value) {
        copyOnWrite();
        instance.setFailureMessage(value);
        return this;
      }
      /**
       * <pre>
       * The failure reason messaged
       * </pre>
       *
       * <code>string failure_message = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearFailureMessage() {
        copyOnWrite();
        instance.clearFailureMessage();
        return this;
      }
      /**
       * <pre>
       * The failure reason messaged
       * </pre>
       *
       * <code>string failure_message = 4;</code>
       * @param value The bytes for failureMessage to set.
       * @return This builder for chaining.
       */
      public Builder setFailureMessageBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFailureMessageBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SwapFail)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new network.tdex.swap.Swap.SwapFail();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "id_",
              "messageId_",
              "failureCode_",
              "failureMessage_",
            };
            java.lang.String info =
                "\u0000\u0004\u0000\u0000\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u0208\u0002\u0208" +
                "\u0003\u000b\u0004\u0208";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<network.tdex.swap.Swap.SwapFail> parser = PARSER;
          if (parser == null) {
            synchronized (network.tdex.swap.Swap.SwapFail.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<network.tdex.swap.Swap.SwapFail>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:SwapFail)
    private static final network.tdex.swap.Swap.SwapFail DEFAULT_INSTANCE;
    static {
      SwapFail defaultInstance = new SwapFail();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        SwapFail.class, defaultInstance);
    }

    public static network.tdex.swap.Swap.SwapFail getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SwapFail> PARSER;

    public static com.google.protobuf.Parser<SwapFail> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
